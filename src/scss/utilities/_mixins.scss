// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// media queries
@mixin mq($break) {
  @if $break== 'small' {
    @media (min-width: $brkpoint--sm) and (max-width: $brkpoint--md) {
      @content;
    }
  } @else if $break== 'medium' {
    @media (min-width: $brkpoint--md + 1) {
      @content;
    }
  } @else if $break== 'large' {
    @media (min-width: $brkpoint--lg) {
      @content;
    }
  } @else {
    @error "Sorry, no value could be retrieved for "#{$break}".";
  }
}

// flexbox
@mixin flex($disp: null, $flow: null, $just: null, $items: null, $flex: null) {
  display: $disp;
  flex-flow: $flow;
  justify-content: $just;
  align-items: $items;
  flex: $flex;
}

// grid columns

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

//button mixins
@mixin button-setup($type) {
  @extend %btn;
  @extend %btn--#{$type};

  &:focus {
    @extend %btn--#{$type};
  }
  &:hover {
    @extend %btn--#{$type}--hover;
  }

  &.disabled {
    // @extend %disabled;
    &:hover {
      @extend %btn--#{$type};
    }
  }
}
